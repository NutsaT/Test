
VAGRANT TWO VM SETUP (WEB + DB)
===============================

This guide will help you create two virtual machines (VMs) using Vagrant:
- A **web server** VM
- A **database server (MySQL)** VM

You will be able to connect from the web VM to the database VM.

---

1. INSTALL REQUIRED SOFTWARE
----------------------------
Make sure these are installed on your computer:
- **VirtualBox** (virtual machine software)
  Download from: https://www.virtualbox.org
- **Vagrant** (tool to manage VMs easily)
  Download from: https://www.vagrantup.com/downloads

---

2. CREATE A NEW FOLDER FOR YOUR PROJECT
---------------------------------------
Open your terminal (Command Prompt or PowerShell) and run:

    mkdir myvagrantproject
    cd myvagrantproject

This makes a new folder and moves you inside it.

---

3. INITIALIZE VAGRANT IN THE FOLDER
----------------------------------
Run this command to create a basic Vagrant setup:

    vagrant init

This creates a file named `Vagrantfile` in the folder.

---

4. EDIT THE VAGRANTFILE TO DEFINE YOUR TWO VMs
----------------------------------------------
Open the `Vagrantfile` in a text editor (like Notepad).

Delete everything inside it and replace with the following content exactly:

--------------------------------------------------------
Vagrant.configure("2") do |config|

  # Define the web server VM
  config.vm.define "web" do |web|
    web.vm.box = "ubuntu/bionic64"                     # Ubuntu 18.04 image
    web.vm.hostname = "web"                            # Set hostname
    web.vm.network "private_network", ip: "192.168.33.10"  # Private IP address
    web.vm.network "forwarded_port", guest: 80, host: 8080 # Forward port 80 in VM to 8080 on your PC
    web.vm.network "forwarded_port", guest: 22, host: 2222 # SSH port forwarding
    web.vm.provision "shell", inline: <<-SHELL         # Commands to run inside VM after boot
      apt-get update
      apt-get install -y curl
    SHELL
  end

  # Define the database server VM
  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/bionic64"
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.33.11"
    db.vm.network "forwarded_port", guest: 22, host: 2200
    db.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y mysql-server
      # Allow MySQL to accept remote connections
      sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf
      systemctl restart mysql
      mysql -u root <<-EOF
        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
        CREATE USER 'root'@'%' IDENTIFIED BY 'root';
        GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
        FLUSH PRIVILEGES;
      EOF
    SHELL
  end

end
--------------------------------------------------------

Save and close the file when done.

---

5. START YOUR VMs
-----------------
Run this command to create and start both VMs:

    vagrant up

Wait a few minutes while Vagrant downloads the boxes and boots the VMs.

---

6. ACCESS THE VMS VIA SSH
-------------------------
To connect to the **web server VM**, run:

    vagrant ssh web

To connect to the **database server VM**, open a new terminal and run:

    vagrant ssh db

---

7. SETUP MYSQL DATABASE (ON DB VM)
----------------------------------
Once logged into the **db** VM via SSH:

Run:

    sudo mysql -u root -proot

You are now inside the MySQL prompt. Enter these commands **one by one**, pressing Enter after each:

    CREATE DATABASE vagrant_test;
    USE vagrant_test;
    CREATE TABLE hello (id INT PRIMARY KEY, message VARCHAR(100));
    INSERT INTO hello VALUES (1, 'Hello from the database!');
    SELECT * FROM hello;
    EXIT;

---

8. TEST DATABASE CONNECTION FROM WEB VM
---------------------------------------
If you're still in the `db` VM, exit by typing:

    exit

Then connect to the **web** VM:

    vagrant ssh web

Inside the web VM, install MySQL client to connect remotely:

    sudo apt-get update
    sudo apt-get install -y mysql-client

Then connect to the MySQL database on the db VM:

    mysql -uroot -proot -h192.168.33.11

Inside MySQL prompt, check the data:

    USE vagrant_test;
    SELECT * FROM hello;

To exit MySQL:

    EXIT;

---

9. SHUTDOWN OR REMOVE VMS (OPTIONAL)
-----------------------------------
To stop the VMs but keep their state:

    vagrant halt

To delete the VMs completely (you will lose all changes inside them):

    vagrant destroy -f

---

You did it! 

If anything is unclear or you want me to explain any command or step, just ask.

